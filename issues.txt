    commandHandler   *commands.Handler     // Gestionnaire de commandes (/, /load, etc.)
    renderer         *ui.Renderer          // Rendu des messages formatés
    layoutManager    *ui.Layout            // Gestion du layout responsive
    sidebar          *ui.Sidebar           // Barre latérale d'affichage
    aiOperations     *ai.Operations        // Opérations IA (analyse, explication)
    viewportManager  *viewportmgr.Manager  // Gestionnaire de viewport avancé

    // État de l'application
    width             int
    height            int
    ready             bool                // Indique si l'UI est initialisée
    helpVisible       bool                // Aide visible ou non

DeeCLI: **📝 Edit Suggestions:**
• **model.go** - Ajouter des commentaires détaillés pour clarifier les sections complexes du code, particulièrement autour des mécanismes de streaming, de la gestion des états de l'interface Bubbletea, et de l'intégration avec l'API DeepSeek. Les zones obscures identifiées incluent la logique de
traitement des commandes slash, la gestion des sessions persistantes, et les transitions entre différents modes d'interface.

**Exemples de zones à commenter :**
- Structures de données complexes (comme les modèles d'état)
- Mécanismes de goroutines pour le streaming
- Logique de parsing des commandes utilisateur
- Gestion des erreurs et timeouts API
- Transitions entre différents états de l'UI

Ces commentaires aideront les développeurs à mieux comprendre l'architecture et faciliteront la maintenance future du code.

System: 📝 Opening suggested file: model.go

System:    Reason: Ajouter des commentaires détaillés pour clarifier les sections complexes du code, particulièrement autour des mécanismes de streaming, de la gestion des états de l'interface Bubbletea, et de l'intégration avec l'API DeepSeek. Les zones obscures identifiées incluent la logique de traitement des
commandes slash, la gestion des sessions persistantes, et les transitions entre différents modes d'interface.

System: ⚠️ Editor 'vim' not found, searching for alternatives...

System: 📝 Using editor: nvim

System: 📝 Opening model.go with instructions in nvim

System: ✓ Editor closed
